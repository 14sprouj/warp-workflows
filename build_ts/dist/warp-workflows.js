!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports["warp-workflows"]=t():e["warp-workflows"]=t()}(global,(function(){return(()=>{var e={637:(e,t,o)=>{var r={"./git_undo_destroy_changes.yaml":474,"./git_undo_keep_changes.yaml":283,"./while_loop.yaml":174};function n(e){var t=a(e);return o(t)}function a(e){if(!o.o(r,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return r[e]}n.keys=function(){return Object.keys(r)},n.resolve=a,e.exports=n,n.id=637},474:e=>{"use strict";e.exports=JSON.parse('{"name":"Undo last git commit and destroy changes","tags":["git"],"command":"git reset --hard HEAD~1","author":"Warp Team"}')},283:e=>{"use strict";e.exports=JSON.parse('{"name":"Undo last git commit and keep changes","tags":["git"],"command":"git reset --soft HEAD~1","author":"Warp Team"}')},174:e=>{"use strict";e.exports=JSON.parse('{"name":"While loop","tags":["shell"],"command":"while {{condition}}; do\\n\\t{{command}}\\ndone","arguments":[{"name":"condition","description":"The condition for the while loop"},{"name":"command","description":"The command to execute within the while loop"}],"author":"Warp Team","shells":["bash","zsh"]}')}},t={};function o(r){var n=t[r];if(void 0!==n)return n.exports;var a=t[r]={exports:{}};return e[r](a,a.exports,o),a.exports}o.d=(e,t)=>{for(var r in t)o.o(t,r)&&!o.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var r={};return(()=>{"use strict";o.r(r),o.d(r,{WORKFLOWS:()=>e});const e=new Map,t=o(637);t.keys().forEach((o=>{const r=t(o),n=o.split("/").pop().split(".").shift();let a=Object.assign(Object.assign({},r),{slug:n});e.set(n,a)}))})(),r})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2FycC13b3JrZmxvd3MuanMiLCJtYXBwaW5ncyI6IkNBQUEsU0FBMkNBLEVBQU1DLEdBQzFCLGlCQUFaQyxTQUEwQyxpQkFBWEMsT0FDeENBLE9BQU9ELFFBQVVELElBQ1EsbUJBQVhHLFFBQXlCQSxPQUFPQyxJQUM5Q0QsT0FBTyxHQUFJSCxHQUNlLGlCQUFaQyxRQUNkQSxRQUFRLGtCQUFvQkQsSUFFNUJELEVBQUssa0JBQW9CQyxJQVIzQixDQVNHSyxRQUFRLFdBQ1gsTSwyQkNWQSxJQUFJQyxFQUFNLENBQ1Qsa0NBQW1DLElBQ25DLCtCQUFnQyxJQUNoQyxvQkFBcUIsS0FJdEIsU0FBU0MsRUFBZUMsR0FDdkIsSUFBSUMsRUFBS0MsRUFBc0JGLEdBQy9CLE9BQU9HLEVBQW9CRixHQUU1QixTQUFTQyxFQUFzQkYsR0FDOUIsSUFBSUcsRUFBb0JDLEVBQUVOLEVBQUtFLEdBQU0sQ0FDcEMsSUFBSUssRUFBSSxJQUFJQyxNQUFNLHVCQUF5Qk4sRUFBTSxLQUVqRCxNQURBSyxFQUFFRSxLQUFPLG1CQUNIRixFQUVQLE9BQU9QLEVBQUlFLEdBRVpELEVBQWVTLEtBQU8sV0FDckIsT0FBT0MsT0FBT0QsS0FBS1YsSUFFcEJDLEVBQWVXLFFBQVVSLEVBQ3pCUixFQUFPRCxRQUFVTSxFQUNqQkEsRUFBZUUsR0FBSyxLLG9yQkN2QmhCVSxFQUEyQixHQUcvQixTQUFTUixFQUFvQlMsR0FFNUIsSUFBSUMsRUFBZUYsRUFBeUJDLEdBQzVDLFFBQXFCRSxJQUFqQkQsRUFDSCxPQUFPQSxFQUFhcEIsUUFHckIsSUFBSUMsRUFBU2lCLEVBQXlCQyxHQUFZLENBR2pEbkIsUUFBUyxJQU9WLE9BSEFzQixFQUFvQkgsR0FBVWxCLEVBQVFBLEVBQU9ELFFBQVNVLEdBRy9DVCxFQUFPRCxRQ3BCZlUsRUFBb0JhLEVBQUksQ0FBQ3ZCLEVBQVN3QixLQUNqQyxJQUFJLElBQUlDLEtBQU9ELEVBQ1hkLEVBQW9CQyxFQUFFYSxFQUFZQyxLQUFTZixFQUFvQkMsRUFBRVgsRUFBU3lCLElBQzVFVCxPQUFPVSxlQUFlMUIsRUFBU3lCLEVBQUssQ0FBRUUsWUFBWSxFQUFNQyxJQUFLSixFQUFXQyxNQ0ozRWYsRUFBb0JDLEVBQUksQ0FBQ2tCLEVBQUtDLElBQVVkLE9BQU9lLFVBQVVDLGVBQWVDLEtBQUtKLEVBQUtDLEdDQ2xGcEIsRUFBb0J3QixFQUFLbEMsSUFDSCxvQkFBWG1DLFFBQTBCQSxPQUFPQyxhQUMxQ3BCLE9BQU9VLGVBQWUxQixFQUFTbUMsT0FBT0MsWUFBYSxDQUFFQyxNQUFPLFdBRTdEckIsT0FBT1UsZUFBZTFCLEVBQVMsYUFBYyxDQUFFcUMsT0FBTyxLLGtFQzBCaEQsTUFBTUMsRUFBWSxJQUFJQyxJQUl2QkMsRUFBaUIsT0FNdkJBLEVBQWV6QixPQUFPMEIsU0FBU2hCLElBQzdCLE1BQU1JLEVBQU1XLEVBQWVmLEdBQ3JCaUIsRUFBdUJqQixFQWZia0IsTUFBTSxLQUFLQyxNQUFPRCxNQUFNLEtBQU1FLFFBZ0I5QyxJQUFJQyxFQUFXLCtCQUNWakIsR0FBRyxDQUNOYSxLQUFBQSxJQUVGSixFQUFVUyxJQUFJTCxFQUFNSSxPIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2FycC13b3JrZmxvd3Mvd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovL3dhcnAtd29ya2Zsb3dzL3wvXFwueWEiLCJ3ZWJwYWNrOi8vd2FycC13b3JrZmxvd3Mvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vd2FycC13b3JrZmxvd3Mvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL3dhcnAtd29ya2Zsb3dzL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vd2FycC13b3JrZmxvd3Mvd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly93YXJwLXdvcmtmbG93cy8uL2luZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFtdLCBmYWN0b3J5KTtcblx0ZWxzZSBpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpXG5cdFx0ZXhwb3J0c1tcIndhcnAtd29ya2Zsb3dzXCJdID0gZmFjdG9yeSgpO1xuXHRlbHNlXG5cdFx0cm9vdFtcIndhcnAtd29ya2Zsb3dzXCJdID0gZmFjdG9yeSgpO1xufSkoZ2xvYmFsLCBmdW5jdGlvbigpIHtcbnJldHVybiAiLCJ2YXIgbWFwID0ge1xuXHRcIi4vZ2l0X3VuZG9fZGVzdHJveV9jaGFuZ2VzLnlhbWxcIjogNDc0LFxuXHRcIi4vZ2l0X3VuZG9fa2VlcF9jaGFuZ2VzLnlhbWxcIjogMjgzLFxuXHRcIi4vd2hpbGVfbG9vcC55YW1sXCI6IDE3NFxufTtcblxuXG5mdW5jdGlvbiB3ZWJwYWNrQ29udGV4dChyZXEpIHtcblx0dmFyIGlkID0gd2VicGFja0NvbnRleHRSZXNvbHZlKHJlcSk7XG5cdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKGlkKTtcbn1cbmZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0UmVzb2x2ZShyZXEpIHtcblx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhtYXAsIHJlcSkpIHtcblx0XHR2YXIgZSA9IG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIgKyByZXEgKyBcIidcIik7XG5cdFx0ZS5jb2RlID0gJ01PRFVMRV9OT1RfRk9VTkQnO1xuXHRcdHRocm93IGU7XG5cdH1cblx0cmV0dXJuIG1hcFtyZXFdO1xufVxud2VicGFja0NvbnRleHQua2V5cyA9IGZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0S2V5cygpIHtcblx0cmV0dXJuIE9iamVjdC5rZXlzKG1hcCk7XG59O1xud2VicGFja0NvbnRleHQucmVzb2x2ZSA9IHdlYnBhY2tDb250ZXh0UmVzb2x2ZTtcbm1vZHVsZS5leHBvcnRzID0gd2VicGFja0NvbnRleHQ7XG53ZWJwYWNrQ29udGV4dC5pZCA9IDYzNzsiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsImV4cG9ydCBpbnRlcmZhY2UgV29ya2Zsb3cge1xuICBzbHVnOiBXb3JrZmxvd1NsdWc7XG4gIG5hbWU6IHN0cmluZztcbiAgY29tbWFuZDogc3RyaW5nO1xuICB0YWdzPzogW3N0cmluZ107XG4gIGRlc2NyaXB0aW9uPzogc3RyaW5nO1xuICBhcmd1bWVudHM/OiBbQXJndW1lbnRdO1xuICBzb3VyY2VfdXJsPzogc3RyaW5nO1xuICBhdXRob3I/OiBzdHJpbmc7XG4gIGF1dGhvcl91cmw/OiBzdHJpbmc7XG4gIHNoZWxscz86IFtTaGVsbF07XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQXJndW1lbnQge1xuICBuYW1lOiBzdHJpbmc7XG4gIGRlc2NyaXB0aW9uPzogc3RyaW5nO1xuICBkZWZhdWx0X3ZhbHVlPzogc3RyaW5nO1xufVxuXG5leHBvcnQgY29uc3QgZW51bSBTaGVsbCB7XG4gIEJhc2ggPSBcImJhc2hcIixcbiAgRmlzaCA9IFwiZmlzaFwiLFxuICBac2ggPSBcInpzaFwiLFxufVxuXG5leHBvcnQgdHlwZSBXb3JrZmxvd1NsdWcgPSBzdHJpbmc7XG5cbmZ1bmN0aW9uIGdldEZpbGVOYW1lT25seShmaWxlUGF0aDogc3RyaW5nKSA6IHN0cmluZyB7XG4gIHJldHVybiBmaWxlUGF0aC5zcGxpdChcIi9cIikucG9wKCkhLnNwbGl0KFwiLlwiKSEuc2hpZnQoKSE7XG59XG5cbmV4cG9ydCBjb25zdCBXT1JLRkxPV1MgPSBuZXcgTWFwPFdvcmtmbG93U2x1ZywgV29ya2Zsb3c+KCk7XG5cbi8vIFVzaW5nIFdlYnBhY2ssIGR5bmFtaWNhbGx5IGxvYWQgYWxsIHRoZSBZQU1MIGZpbGVzIGluIHRoZSBgc3BlY3NgIGRpcmVjdG9yeVxuLy8gYXMgSmF2YXNjcmlwdCBvYmplY3RzIGFuZCBzdG9yZSB0aGUgb2JqZWN0cyB3aXRoaW4gdGhlIGBXT1JLRkxPV1NgIG1hcC5cbmNvbnN0IHJlcXVpcmVDb250ZXh0ID0gcmVxdWlyZS5jb250ZXh0KFxuICBcInlhbWwtbG9hZGVyIS4uL3NwZWNzXCIsXG4gIGZhbHNlLFxuICAvXFwueWE/bWwkL1xuKTtcblxucmVxdWlyZUNvbnRleHQua2V5cygpLmZvckVhY2goKGtleTogc3RyaW5nKSA9PiB7XG4gIGNvbnN0IG9iaiA9IHJlcXVpcmVDb250ZXh0KGtleSk7XG4gIGNvbnN0IHNsdWcgPSBnZXRGaWxlTmFtZU9ubHkoa2V5KTtcbiAgbGV0IHdvcmtmbG93ID0ge1xuICAgIC4uLm9iaixcbiAgICBzbHVnLFxuICB9IGFzIFdvcmtmbG93O1xuICBXT1JLRkxPV1Muc2V0KHNsdWcsIHdvcmtmbG93KTtcbn0pOyJdLCJuYW1lcyI6WyJyb290IiwiZmFjdG9yeSIsImV4cG9ydHMiLCJtb2R1bGUiLCJkZWZpbmUiLCJhbWQiLCJnbG9iYWwiLCJtYXAiLCJ3ZWJwYWNrQ29udGV4dCIsInJlcSIsImlkIiwid2VicGFja0NvbnRleHRSZXNvbHZlIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm8iLCJlIiwiRXJyb3IiLCJjb2RlIiwia2V5cyIsIk9iamVjdCIsInJlc29sdmUiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsInVuZGVmaW5lZCIsIl9fd2VicGFja19tb2R1bGVzX18iLCJkIiwiZGVmaW5pdGlvbiIsImtleSIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsIm9iaiIsInByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsIldPUktGTE9XUyIsIk1hcCIsInJlcXVpcmVDb250ZXh0IiwiZm9yRWFjaCIsInNsdWciLCJzcGxpdCIsInBvcCIsInNoaWZ0Iiwid29ya2Zsb3ciLCJzZXQiXSwic291cmNlUm9vdCI6IiJ9